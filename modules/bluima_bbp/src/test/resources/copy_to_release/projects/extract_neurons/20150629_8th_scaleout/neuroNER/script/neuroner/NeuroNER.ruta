PACKAGE neuroner;

Document{-> RETAINTYPE(BREAK)}; // retains breaking lines, so that two neurons on two different lines do not collide

DECLARE NeuronTrigger;  // acts as a trigger
DECLARE Annotation NeuronProperty(STRING name, STRING ontologyId); // base class for properties

// DEVELOPMENTAL STAGES
DECLARE NeuronProperty Developmental;
Document{-> MARKTABLE(Developmental, 1, 'bluima/neuroner/hbp_developmental_ontology.csv', true, 2, "", 2, "ontologyId" = 2)};

// NEUROTRANSMITTER
DECLARE NeuronProperty NeurotransmitterProp(STRING name, STRING ontologyId);
Document{-> MARKTABLE(NeurotransmitterProp, 1, 'bluima/neuroner/hbp_neurotransmitter_ontology.csv', true, 2, "", 2, "ontologyId" = 2)};

// LAYER
DECLARE NeuronProperty Layer;
Document{-> MARKTABLE(Layer, 1, 'bluima/neuroner/hbp_layer_ontology.csv', true, 2, "", 2, "ontologyId" = 2)};

// MORPHOLOGY
DECLARE NeuronProperty Morphology;
Document{-> MARKTABLE(Morphology, 1, 'bluima/neuroner/hbp_morphology_ontology.csv', true, 2, "", 2, "ontologyId" = 2)};
// SPECIES
WORDTABLE speciesWt = 'bluima/neuroner/ncbi_species_top1000.csv';
DECLARE NeuronProperty Species;
Document{-> MARKTABLE(Species, 1, speciesWt, true, 2, "", 2, "ontologyId" = 2)};

// ORIENTATION
DECLARE NeuronProperty Orientation;
"(?i)inverted|horizontal|descending|upper|lower" -> Orientation;

// SIZE
DECLARE NeuronProperty Size;
"(?i)large|medium|small|narrow|giant" -> Size;

// ELECTROPHYSIOLOGY
DECLARE Annotation EphysTrigger(STRING name, STRING ontologyId);
DECLARE Annotation EphysProp(STRING name, STRING ontologyId);
Document{-> MARKTABLE(EphysTrigger, 1, 'bluima/neuroner/hbp_electrophysiology-triggers_ontology.csv', true, 2, "", 2, "ontologyId" = 2)};
Document{-> MARKTABLE(EphysProp, 1, 'bluima/neuroner/hbp_electrophysiology_ontology.csv', true, 2, "", 2, "ontologyId" = 2)};
DECLARE NeuronProperty Electrophysiology;
(EphysTrigger|EphysProp)+ {-> MARK(Electrophysiology)};

// DICTIONARY MATCHING
DECLARE NeuronProperty Function;
DECLARE NeuronProperty BrainRegionProp; // so as not to be confused w/ other BrainRegion annotations
DECLARE Annotation ProteinName(STRING name, STRING ontologyId); // is further aggregated below
// we use a single compiled trie to match word lists (found in resources folder)
WORDLIST generated = 'bluima/neuroner/generated.mtwl';
Document{ ->TRIE(
    "neuron_triggers.txt" = NeuronTrigger,
    "functions.txt" = Function,
    "proteins_ns_dan.txt" = ProteinName,
"proteins_obo_pro.txt" = ProteinName,
"regions_adverbs_al.txt" = BrainRegionProp,
"regions_adverbs_ic.txt" = BrainRegionProp,
"regions_lfrench.txt" = BrainRegionProp,
"regions.txt" = BrainRegionProp,
generated, true, 4, false, 0, "")}; // case ignored if word length > 4; edit distance deactivated


// PROTEIN
Document{-> MARKTABLE(ProteinName, 1, 'bluima/neuroner/GeneNames.csv', true, 2, "", 2, "ontologyId" = 2)};
// aggregate protein names (as it was matched above) with a ProteinTrigger
DECLARE ProteinTrigger;
"(?i)(contain|secret|releas|bind|synthesiz|express|contain)ing|principal|immuno(nega|posi|reac)tive|(reac|posi)tive|immunoreactivity|
reactive|labeled|stained|[Cc]re" -> ProteinTrigger;
DECLARE NeuronProperty ProteinProp;
(ProteinName "-"? ProteinTrigger? ProteinTrigger?){-> CREATE(ProteinProp, "ontologyId" = ProteinName)};
(ProteinTrigger "-"? ProteinName ){-> CREATE(ProteinProp, "ontologyId" = ProteinName)};
(ProteinTrigger ProteinName (COMMA ProteinName)?){-> MARK(ProteinProp)};
// also apply protein rules to neurotransmitters
(NeurotransmitterProp "-"? ProteinTrigger){-> SHIFT(NeurotransmitterProp,1,3)};

// aggregate multiple triggers together
(NeuronTrigger "and"? NeuronTrigger){-> SHIFT(NeuronTrigger)};


// AGGREGATE ///////////////////////////////////////////////////////////////////////////////////////////////
DECLARE Neuron;                // matches the whole span of a neuron definition
DECLARE PreNeuron, PostNeuron; // context before and after a neuron trigger

// gather NeuronProperty occurring before and after Neuron into Pre and PostNeuron
NeuronProperty+{-> MARK(PreNeuron, 1, 1)} NeuronTrigger;
(NeuronProperty+ (COMMA | "and" | (COMMA "and")))* {-> MARK(PreNeuron, 1, 2)} NeuronProperty+ NeuronTrigger;
(("in" | "of" | "with") "the"? NeuronProperty+)+ {-> MARK(PostNeuron)};
NeuronTrigger NeuronProperty+ {-> MARK(PostNeuron, 2, 2)};

// aggregate Pre and PostNeurons into Neuron, remove them
PreNeuron NeuronTrigger PostNeuron {-> MARK(Neuron, 1, 3)};
NeuronTrigger PostNeuron {-> MARK(Neuron, 1, 2)};
PreNeuron NeuronTrigger {-> MARK(Neuron, 1, 2)};
//PreNeuron{-> DEL};
//PostNeuron{-> DEL};

// remove single isolated Neuron, unless "cell"
NeuronTrigger{NOT(REGEXP("[Cc]ells?")) -> MARK(Neuron, 1, 1)};

// remove neuron that have line breaks
Neuron{CONTAINS(BREAK) -> DEL}; // TODO check above with pdf (new lines?)
// keep only longest Neuron
Neuron{PARTOF(Neuron) -> DEL}; // TODO remove cells without NeuronProperty


// MISSING ///////////////////////////////////////////////////////////////////////////////////////////////
// Find up to 3 unmatched words preceding a Neuron to see what is still missing
DECLARE Missing, InBetweenMissing;
NeuronProperty (ANY{-PARTOF(NeuronProperty)})                                                           {-> MARK(Missing, 2, 2)} (Neuron|NeuronTrigger);
NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)})                              {-> MARK(Missing, 2, 2)} (Neuron|NeuronTrigger);
NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)} (Neuron|NeuronTrigger);
NeuronTrigger  (ANY{-PARTOF(NeuronProperty)})                                                           {-> MARK(Missing, 2, 2)} PostNeuron;
Neuron         (ANY{-PARTOF(NeuronProperty)})                                                           {-> MARK(Missing, 2, 2)} PostNeuron;
NeuronTrigger  (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)})                              {-> MARK(Missing, 2, 2)} PostNeuron;
Neuron         (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)})                              {-> MARK(Missing, 2, 2)} PostNeuron;
NeuronTrigger  (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)} PostNeuron;
Neuron         (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)} PostNeuron;

//TODO Missing{IF((end-begin) < 2)->DEL};


