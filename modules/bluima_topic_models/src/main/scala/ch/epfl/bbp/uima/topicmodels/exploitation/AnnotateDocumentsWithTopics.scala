package ch.epfl.bbp.uima.topicmodels.exploitation
import org.apache.uima.resource.metadata.TypeSystemDescription
import org.apache.uima.fit.factory.AnalysisEngineFactory
import org.apache.uima.fit.factory.CollectionReaderFactory
import ch.epfl.bbp.uima.topicmodels.annotators.DCATopicModelsAnnotator
import ch.epfl.bbp.uima.topicmodels.preprocessing.PreprocessingEngine
import ch.epfl.bbp.uima.topicmodels.readers.TwentyNewsgroupsCollectionReader
import ch.epfl.bbp.uima.topicmodels.writers.exploitation.AnnotateTokensWithTopicWriter
import ch.epfl.bbp.uima.topicmodels.writers.exploitation.TopicDistributionWriter
import ch.epfl.bbp.uima.typesystem.TypeSystem
import ch.epfl.bbp.uima.uimafit.CpeBuilder
import ch.epfl.bbp.uima.topicmodels.preprocessing.GenericConf

/**
 * Annotates tokens in documents of the 20 Newsgroups corpus with its most likely topic.
 * Also generates a plot of topic distributions for each document.
 *
 * Note: Observed some memory leak (i.e. memory grows large with many document). Not further investigated.
 */
object AnnotateDocumentsWithTopics extends App {
  val workingDir = "/home/mz/Documents/epfl/projet/corpora/twenty_newsgroupstest"
  val stopwords =  GenericConf.malletStopwords

  val reader = CollectionReaderFactory.createReaderDescription(classOf[TwentyNewsgroupsCollectionReader],
    TwentyNewsgroupsCollectionReader.CorpusDirPath, GenericConf.twentyNewsgroupsRawCorpusDir,
    TwentyNewsgroupsCollectionReader.MaxDocsToRead, "10")

  val pre = PreprocessingEngine.getTwentyNewsgroupsPreprocessing(stopwords)

  val dcaAnnotator = AnalysisEngineFactory.createEngineDescription(classOf[DCATopicModelsAnnotator],
    DCATopicModelsAnnotator.DCADirectoryPath, workingDir + "/dca",
    DCATopicModelsAnnotator.DCAStem, "dca",
    DCATopicModelsAnnotator.InferenceBurnin, "20",
    DCATopicModelsAnnotator.InferenceIterations, "100")

  val writer = AnalysisEngineFactory.createEngineDescription(classOf[AnnotateTokensWithTopicWriter],
    AnnotateTokensWithTopicWriter.LatexOutput, "true",
    AnnotateTokensWithTopicWriter.OutputDir, "/tmp/expl")

  val rcommand = "R --vanilla --slave -f /home/mz/Documents/epfl/projet/scripts/plot_doc_topic_distribution.R --args {input} {output}"
  val plots = AnalysisEngineFactory.createEngineDescription(classOf[TopicDistributionWriter],
    TopicDistributionWriter.OutputDir, "/tmp/expl",
    TopicDistributionWriter.Command, rcommand)

  val annotators = pre ::: (dcaAnnotator :: writer :: plots :: Nil)
  val pipelineBuilder = new CpeBuilder(1, reader)
  annotators.foreach(a => pipelineBuilder.add(a))

  pipelineBuilder.process
}
